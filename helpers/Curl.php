<?php
declare(strict_types=1);

namespace noirapi\helpers;

use JsonException;
use noirapi\lib\Controller;
use noirapi\Tracy\CurlBarPanel;
use Tracy\Debugger;

class Curl extends \Curl\Curl {

    private static array $requests = [];

    public function __construct() {

        if(!isset(Controller::$panels['curl'])) {
            Controller::$panels['curl'] = true;

            $panel = new CurlBarPanel();
            $panel->title = 'Curl';

            Debugger::getBar()->addPanel($panel);
        }

        parent::__construct();

    }

    public function exec($ch = null): mixed {

        $start = microtime(true);

        $res = parent::exec($ch); // TODO: Change the autogenerated stub

        $info = $this->getInfo();
        $method = $this->getOpt(CURLOPT_CUSTOMREQUEST);
        $this->addLog(
            url: ($method ?? 'POST') . ' ' . $this->getUrl(),
            info: $info['http_code'] . ' ' . $info['content_type'],
            time: microtime(true) - $start,
            request: $this->getOpt(CURLOPT_POSTFIELDS) ?? 'none',
            response: is_object($this->response) ? $this->response : substr((string)$this->response, 0 ,128));

        return $res;

    }

    /**
     * @param string $url
     * @param string $info
     * @param float $time
     * @param array|string $request
     * @param object|string|null $response
     * @return void
     */
    public function addLog(string $url, string $info, float $time, array|string $request, object|string $response = null): void {

        try {
            $request = json_decode($request, true, 512, JSON_THROW_ON_ERROR);
        } catch (JsonException) {
        }

        self::$requests[] = [
            'url'       => $url,
            'request'   => $request,
            'info'      => $info,
            'time'      => $time * 1000,
            'response'  => $response,
        ];

    }

    /**
     * @return array
     */
    public static function getLog(): array {

        return self::$requests;

    }

}
